plugins {
    id 'org.flywaydb.flyway' version '9.7.0'
    id 'nu.studer.jooq' version '8.2'
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.crux.cadence'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

def cadenceVersion = '3.8.1'
def postgreVersion = '42.5.1'
def lombokVersion = '1.18.26'
def junitVersion = '5.9.3'
def hamcrestVersion = '1.3'

configurations {
    flywayMigration
}

dependencies {
    implementation files('libs/demoLib-1.0-SNAPSHOT.jar')

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    implementation "com.uber.cadence:cadence-client:$cadenceVersion"

    implementation "org.postgresql:postgresql:$postgreVersion"
    flywayMigration 'org.postgresql:postgresql:42.5.1'
    jooqGenerator 'org.postgresql:postgresql:42.5.1'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

flyway {
    configurations = ['flywayMigration']
    url = 'jdbc:postgresql://localhost:5432/cruxdemo'
    user = 'chipolino'
    password = 'bestPa55wor#'
}

jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = flyway.url
                    user = 'uncleblueberry'
                    password = 'superPa55*'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        includes = '.*'
                        excludes = ''
                    }
                    target {
                        packageName = 'com.crux.cadence.demo.dsl'
                        directory = 'src/main/java/jooq/'
                    }
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('src/main/resources/db/migration'))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds (and build caching)
    allInputsDeclared = true
}

tasks.named('test') {
    useJUnitPlatform()
}
